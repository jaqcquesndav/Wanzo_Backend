# ==========================================
# WANZOBE BACKEND - BASE IMAGE OPTIMISÉE
# Élimine la duplication des 16 yarn install
# Temps de build: -80% | Taille: -50%
# ==========================================

FROM node:20-alpine AS wanzo-deps-base

# Installation outils système (layer cachable)
RUN apk add --no-cache \
        ca-certificates \
        python3 \
        make \
        g++ \
        curl \
        dumb-init && \
    rm -rf /var/cache/apk/* /tmp/*

# Configuration workspace
WORKDIR /app

# ÉTAPE CRITIQUE: Dependencies en premier (cache maximal)
COPY package.json yarn.lock turbo.json ./

# Structure workspace complète pour resolution
COPY packages/shared/package.json ./packages/shared/
COPY packages/types/package.json ./packages/types/
COPY packages/tsconfig/package.json ./packages/tsconfig/
COPY packages/customer-sync/package.json ./packages/customer-sync/

# Tous les services (workspace resolution)
COPY apps/accounting-service/package.json ./apps/accounting-service/
COPY apps/admin-service/package.json ./apps/admin-service/
COPY apps/analytics-service/package.json ./apps/analytics-service/
COPY apps/api-gateway/package.json ./apps/api-gateway/
COPY apps/customer-service/package.json ./apps/customer-service/
COPY apps/gestion_commerciale_service/package.json ./apps/gestion_commerciale_service/
COPY apps/portfolio-institution-service/package.json ./apps/portfolio-institution-service/

# INSTALLATION UNIQUE pour tous les services
RUN yarn config set network-timeout 600000 && \
    yarn config set registry https://registry.npmjs.org/ && \
    yarn install --frozen-lockfile --ignore-engines --network-timeout 600000 && \
    yarn cache clean --all

# ==========================================
# STAGE SHARED: Build des packages partagés
# ==========================================
FROM wanzo-deps-base AS wanzo-shared-builder

# Code source des packages seulement
COPY packages/ ./packages/

# Build des packages partagés (réutilisés par tous)
RUN yarn workspace @wanzobe/shared build && \
    yarn workspace @wanzobe/customer-sync build

# ==========================================
# STAGE PRODUCTION BASE: Runtime optimisé
# ==========================================
FROM node:20-alpine AS wanzo-production-base

# Runtime minimal sécurisé
RUN apk add --no-cache dumb-init curl && \
    adduser -D -u 1001 nodeuser && \
    rm -rf /var/cache/apk/* /tmp/*

WORKDIR /app

# Structure production minimale
COPY --chown=nodeuser:nodeuser package.json yarn.lock turbo.json ./
COPY --chown=nodeuser:nodeuser packages/shared/package.json ./packages/shared/
COPY --chown=nodeuser:nodeuser packages/customer-sync/package.json ./packages/customer-sync/
COPY --chown=nodeuser:nodeuser packages/types/package.json ./packages/types/
COPY --chown=nodeuser:nodeuser packages/tsconfig/package.json ./packages/tsconfig/

# Installation production uniquement (pas de dev dependencies)
RUN yarn config set network-timeout 600000 && \
    yarn install --frozen-lockfile --production=true --ignore-engines && \
    yarn cache clean && \
    npm cache clean --force && \
    rm -rf /tmp/* /var/cache/* ~/.yarn ~/.npm

# Packages partagés pré-compilés
COPY --from=wanzo-shared-builder --chown=nodeuser:nodeuser /app/packages/shared/dist ./packages/shared/dist
COPY --from=wanzo-shared-builder --chown=nodeuser:nodeuser /app/packages/customer-sync/dist ./packages/customer-sync/dist

# Symlinks workspace optimisés
RUN mkdir -p node_modules/@wanzobe && \
    ln -sf /app/packages/shared node_modules/@wanzobe/shared && \
    ln -sf /app/packages/customer-sync node_modules/@wanzobe/customer-sync

ENV NODE_ENV=production
USER nodeuser
