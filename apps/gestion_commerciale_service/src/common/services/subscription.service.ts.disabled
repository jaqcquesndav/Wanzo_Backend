// Ce service est désactivé car la gestion des abonnements est centralisée dans customer-service
// Fichier conservé pour référence uniquement

import { Injectable, HttpException, HttpStatus, Logger } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { ConfigService } from '@nestjs/config';
import { firstValueFrom } from 'rxjs';
import { catchError, timeout } from 'rxjs/operators';

export interface SubscriptionValidationResult {
  hasAccess: boolean;
  subscription?: {
    id: string;
    planName: string;
    status: string;
    expiresAt: Date;
    features: string[];
  };
  limits?: {
    maxTransactions: number;
    maxCustomers: number;
    maxUsers: number;
    maxProducts: number;
    maxFiles: number;
    [key: string]: number;
  };
  error?: string;
}

@Injectable()
export class SubscriptionService {
  private readonly logger = new Logger(SubscriptionService.name);
  private readonly customerServiceUrl: string;

  constructor(
    private readonly httpService: HttpService,
    private readonly configService: ConfigService,
  ) {
    this.customerServiceUrl = this.configService.get<string>('CUSTOMER_SERVICE_URL') || 'http://localhost:3002';
    this.logger.warn('SubscriptionService est désactivé - la gestion est centralisée dans customer-service');
  }

  // Les méthodes sont remplacées par des versions désactivées qui renvoient des valeurs par défaut

  /**
   * Valide si un client de la plateforme a accès au service de gestion commerciale
   * @param platformClientId ID du client dans le système customer-service
   */
  async validateCommercialAccess(platformClientId: string): Promise<SubscriptionValidationResult> {
    this.logger.log(`[DÉSACTIVÉ] Accès accordé par défaut pour le client ${platformClientId}`);
    return {
      hasAccess: true,
      subscription: {
        id: 'default-subscription',
        planName: 'Default Plan',
        status: 'active',
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        features: ['all'],
      },
      limits: {
        maxTransactions: 1000,
        maxCustomers: 1000,
        maxUsers: 10,
        maxProducts: 1000,
        maxFiles: 100,
      },
    };
  }

  /**
   * Vérifie si une fonctionnalité spécifique est disponible pour ce client
   * @param platformClientId ID du client dans le système customer-service
   * @param featureKey Clé de la fonctionnalité à vérifier
   */
  async hasFeature(platformClientId: string, featureKey: string): Promise<boolean> {
    this.logger.log(`[DÉSACTIVÉ] Vérification de fonctionnalité ${featureKey} pour ${platformClientId} - accès accordé`);
    return true;
  }

  /**
   * Vérifie si le client a atteint une limite spécifique
   * @param platformClientId ID du client
   * @param limitKey Clé de la limite à vérifier
   * @param currentValue Valeur actuelle à comparer avec la limite
   */
  async checkLimit(platformClientId: string, limitKey: string, currentValue: number): Promise<boolean> {
    this.logger.log(`[DÉSACTIVÉ] Vérification de limite ${limitKey}=${currentValue} pour ${platformClientId} - accès accordé`);
    return true; // En mode désactivé, on ne limite pas
  }
}
