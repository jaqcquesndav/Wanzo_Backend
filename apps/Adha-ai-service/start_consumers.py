"""
Script de d√©marrage des consumers Kafka pour Adha AI Service
Lance tous les consumers n√©cessaires pour la synchronisation et l'isolation des donn√©es
"""
import os
import sys
import threading
import time
import logging
from pathlib import Path

# Ajouter le r√©pertoire du projet au path Python
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adha_ai_service.settings')

import django
django.setup()

from api.kafka.customer_data_consumer import CustomerDataConsumer
from api.kafka.unified_consumer import UnifiedConsumer

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/kafka_consumers.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class ConsumerManager:
    """
    Gestionnaire des consumers Kafka pour le service Adha AI.
    Lance et surveille tous les consumers n√©cessaires.
    """
    
    def __init__(self):
        self.consumers = {}
        self.running = False
        self.threads = []
        
    def start_all_consumers(self):
        """D√©marre tous les consumers en parall√®le."""
        logger.info("üöÄ Starting Adha AI Kafka Consumers...")
        
        try:
            # 1. Consumer de synchronisation des donn√©es customer (CRITIQUE pour l'isolation)
            logger.info("Starting Customer Data Consumer...")
            customer_consumer = CustomerDataConsumer()
            customer_thread = threading.Thread(
                target=customer_consumer.start_consuming,
                name="CustomerDataConsumer",
                daemon=True
            )
            customer_thread.start()
            self.threads.append(customer_thread)
            self.consumers['customer_data'] = customer_consumer
            
            # 2. Consumer unifi√© pour les autres √©v√©nements
            logger.info("Starting Unified Consumer...")
            unified_consumer = UnifiedConsumer()
            unified_thread = threading.Thread(
                target=unified_consumer.start,
                name="UnifiedConsumer", 
                daemon=True
            )
            unified_thread.start()
            self.threads.append(unified_thread)
            self.consumers['unified'] = unified_consumer
            
            self.running = True
            logger.info("‚úÖ All Kafka consumers started successfully!")
            
            # Afficher le statut
            self.display_status()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting consumers: {str(e)}")
            self.stop_all_consumers()
            raise
    
    def display_status(self):
        """Affiche le statut des consumers."""
        print("\n" + "="*60)
        print("üîÑ ADHA AI KAFKA CONSUMERS STATUS")
        print("="*60)
        print(f"üì° Customer Data Consumer: {'‚úÖ RUNNING' if 'customer_data' in self.consumers else '‚ùå STOPPED'}")
        print(f"üì° Unified Consumer: {'‚úÖ RUNNING' if 'unified' in self.consumers else '‚ùå STOPPED'}")
        print(f"üßµ Active Threads: {len(self.threads)}")
        print("="*60)
        
        print("\nüìã TOPICS MONITORED:")
        print("‚Ä¢ customer.user.updated - Sync des donn√©es utilisateur")
        print("‚Ä¢ customer.user.created - Cr√©ation d'utilisateurs")
        print("‚Ä¢ customer.institution.updated - Sync des institutions")
        print("‚Ä¢ customer.company.updated - Sync des soci√©t√©s")
        print("‚Ä¢ user.login - √âv√©nements de connexion")
        print("‚Ä¢ adha-ai-events - √âv√©nements Adha AI")
        print("‚Ä¢ commerce.operation.created - Op√©rations commerciales")
        print("‚Ä¢ portfolio.analysis.request - Demandes d'analyse")
        print("‚Ä¢ accounting.journal.status - Statuts des √©critures")
        
        print(f"\nüîí ISOLATION: Middleware activ√©")
        print(f"‚ö° PERFORMANCE: Cache Redis activ√©")
        print(f"üßÆ CALCULATIONS: D√©tection automatique activ√©e")
        print("="*60)
    
    def monitor_consumers(self):
        """Surveille l'√©tat des consumers et les red√©marre si n√©cessaire."""
        logger.info("üîç Starting consumer monitoring...")
        
        while self.running:
            try:
                # V√©rifier que tous les threads sont encore vivants
                dead_threads = [t for t in self.threads if not t.is_alive()]
                
                if dead_threads:
                    logger.warning(f"‚ö†Ô∏è Found {len(dead_threads)} dead consumer threads")
                    
                    for dead_thread in dead_threads:
                        logger.error(f"‚ùå Consumer thread {dead_thread.name} died")
                        self.threads.remove(dead_thread)
                    
                    # Essayer de red√©marrer les consumers morts
                    if len(self.threads) < 2:  # Nous avons 2 consumers principaux
                        logger.info("üîÑ Attempting to restart consumers...")
                        self.restart_failed_consumers()
                
                # Attendre avant la prochaine v√©rification
                time.sleep(30)  # V√©rification toutes les 30 secondes
                
            except KeyboardInterrupt:
                logger.info("üõë Monitoring interrupted by user")
                break
            except Exception as e:
                logger.error(f"‚ùå Error in consumer monitoring: {str(e)}")
                time.sleep(10)  # Attendre avant de r√©essayer
    
    def restart_failed_consumers(self):
        """Red√©marre les consumers qui ont √©chou√©."""
        try:
            # Nettoyer les anciens consumers
            self.consumers.clear()
            
            # Red√©marrer
            self.start_all_consumers()
            
        except Exception as e:
            logger.error(f"‚ùå Error restarting consumers: {str(e)}")
    
    def stop_all_consumers(self):
        """Arr√™te tous les consumers proprement."""
        logger.info("üõë Stopping all Kafka consumers...")
        
        self.running = False
        
        # Arr√™ter les consumers
        for name, consumer in self.consumers.items():
            try:
                if hasattr(consumer, 'stop'):
                    consumer.stop()
                logger.info(f"‚úÖ Stopped {name} consumer")
            except Exception as e:
                logger.error(f"‚ùå Error stopping {name} consumer: {str(e)}")
        
        # Attendre que les threads se terminent
        for thread in self.threads:
            try:
                thread.join(timeout=5)
                if thread.is_alive():
                    logger.warning(f"‚ö†Ô∏è Thread {thread.name} did not stop gracefully")
            except Exception as e:
                logger.error(f"‚ùå Error joining thread {thread.name}: {str(e)}")
        
        logger.info("‚úÖ All consumers stopped")

def main():
    """Point d'entr√©e principal."""
    consumer_manager = ConsumerManager()
    
    try:
        # D√©marrer tous les consumers
        consumer_manager.start_all_consumers()
        
        # Lancer la surveillance
        consumer_manager.monitor_consumers()
        
    except KeyboardInterrupt:
        logger.info("\nüõë Shutdown requested by user")
    except Exception as e:
        logger.error(f"‚ùå Critical error: {str(e)}")
    finally:
        consumer_manager.stop_all_consumers()

if __name__ == "__main__":
    main()
