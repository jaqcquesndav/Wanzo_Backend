"""
Advanced Calculation Detector for Adha AI Service
D√©tecte automatiquement les op√©rations de calcul et les traite sans LLM
pour optimiser les performances et la pr√©cision.
"""
import re
import math
from decimal import Decimal, getcontext
from typing import Dict, List, Any, Optional, Tuple
from agents.utils.calculation_helper import CalculationHelper

class CalculationDetector:
    """
    D√©tecteur intelligent qui identifie les demandes de calcul et les traite
    directement sans passer par le LLM pour optimiser les performances.
    """
    
    def __init__(self):
        self.calc_helper = CalculationHelper(precision=2)
        
        # Patterns pour d√©tecter les calculs
        self.calculation_patterns = [
            # Op√©rations arithm√©tiques directes
            r'\d+(?:\.\d+)?\s*[\+\-\*\/]\s*\d+(?:\.\d+)?',
            
            # Mots-cl√©s de calcul en fran√ßais
            r'\b(?:calcul|calculer|additionner|addition|soustraire|soustraction)\b',
            r'\b(?:multiplier|multiplication|diviser|division|total|somme)\b',
            r'\b(?:diff√©rence|produit|quotient|r√©sultat|moyenne)\b',
            
            # Termes comptables sp√©cifiques
            r'\b(?:TVA|HT|TTC|taux|pourcentage|%)\b',
            r'\b(?:d√©bit|cr√©dit|solde|balance|√©quilibre)\b',
            r'\b(?:amortissement|provision|charge|produit)\b',
            
            # Formulations de questions de calcul
            r'(?:combien|quel\s+est|quelle\s+est).*(?:total|somme|montant)',
            r'(?:quel\s+est\s+le\s+)?(?:r√©sultat|montant|total).*[\+\-\*\/]',
            
            # Calculs de TVA sp√©cifiques
            r'(?:TVA\s+de\s+)?(\d+(?:\.\d+)?)\s*%\s*(?:de|sur)\s*(\d+(?:\.\d+)?)',
            r'(?:prix\s+)?(?:HT|TTC)\s*(?:de|√†|=)\s*(\d+(?:\.\d+)?)',
        ]
        
        # Patterns pour extraire les nombres et op√©rations
        self.number_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:euros?|‚Ç¨|EUR)',
            r'(\d+(?:\.\d+)?)\s*(?:%|pour\s+cent|pourcent)',
            r'(\d+(?:[\.,]\d+)?)',  # Nombres avec virgule ou point
        ]
        
        # Op√©rations TVA courantes
        self.tva_rates = {
            'standard': Decimal('20'),
            'interm√©diaire': Decimal('10'),
            'r√©duit': Decimal('5.5'),
            'super_r√©duit': Decimal('2.1')
        }
    
    def detect_calculation(self, prompt: str) -> bool:
        """
        D√©tecte si le prompt contient une demande de calcul.
        
        Args:
            prompt (str): Le prompt utilisateur √† analyser
            
        Returns:
            bool: True si un calcul est d√©tect√©, False sinon
        """
        prompt_lower = prompt.lower()
        
        # V√©rifier chaque pattern de calcul
        for pattern in self.calculation_patterns:
            if re.search(pattern, prompt_lower, re.IGNORECASE):
                return True
        
        return False
    
    def extract_and_calculate(self, prompt: str) -> Dict[str, Any]:
        """
        Extrait les calculs du prompt et les ex√©cute.
        
        Args:
            prompt (str): Le prompt contenant les calculs
            
        Returns:
            Dict: R√©sultat du calcul avec d√©tails
        """
        try:
            # 1. D√©tecter le type de calcul
            calc_type = self._identify_calculation_type(prompt)
            
            # 2. Ex√©cuter le calcul selon le type
            if calc_type == 'tva':
                return self._calculate_tva(prompt)
            elif calc_type == 'arithmetic':
                return self._calculate_arithmetic(prompt)
            elif calc_type == 'accounting':
                return self._calculate_accounting(prompt)
            elif calc_type == 'percentage':
                return self._calculate_percentage(prompt)
            else:
                return self._calculate_generic(prompt)
                
        except Exception as e:
            return {
                'type': 'error',
                'message': f'Erreur lors du calcul: {str(e)}',
                'success': False
            }
    
    def _identify_calculation_type(self, prompt: str) -> str:
        """Identifie le type de calcul demand√©."""
        prompt_lower = prompt.lower()
        
        if re.search(r'\btva\b|ht|ttc', prompt_lower):
            return 'tva'
        elif re.search(r'd√©bit|cr√©dit|balance|solde', prompt_lower):
            return 'accounting'
        elif re.search(r'%|pourcentage|taux', prompt_lower):
            return 'percentage'
        elif re.search(r'[\+\-\*\/]', prompt):
            return 'arithmetic'
        else:
            return 'generic'
    
    def _calculate_tva(self, prompt: str) -> Dict[str, Any]:
        """Calcule les montants TVA (HT, TTC, TVA)."""
        try:
            numbers = self._extract_numbers(prompt)
            
            # Extraire le taux de TVA
            tva_rate = Decimal('20')  # Taux par d√©faut
            tva_match = re.search(r'(\d+(?:\.\d+)?)\s*%', prompt)
            if tva_match:
                tva_rate = Decimal(tva_match.group(1))
            
            if len(numbers) >= 1:
                base_amount = numbers[0]
                
                # D√©terminer si c'est HT ou TTC
                if re.search(r'\bht\b|hors.{0,5}taxe', prompt, re.IGNORECASE):
                    # Montant HT donn√©, calculer TTC et TVA
                    ht = base_amount
                    tva_amount = self.calc_helper.multiply(ht, tva_rate / 100)
                    ttc = self.calc_helper.add(ht, tva_amount)
                else:
                    # Montant TTC donn√©, calculer HT et TVA
                    ttc = base_amount
                    ht = self.calc_helper.divide(ttc, 1 + (tva_rate / 100))
                    tva_amount = self.calc_helper.subtract(ttc, ht)
                
                return {
                    'type': 'tva',
                    'success': True,
                    'result': {
                        'montant_ht': float(ht),
                        'montant_ttc': float(ttc),
                        'montant_tva': float(tva_amount),
                        'taux_tva': float(tva_rate)
                    },
                    'formatted_result': f"""
üí∞ **Calcul TVA**
- Montant HT: {ht:.2f} ‚Ç¨
- TVA ({tva_rate}%): {tva_amount:.2f} ‚Ç¨
- Montant TTC: {ttc:.2f} ‚Ç¨
                    """.strip(),
                    'explanation': f"Calcul TVA avec un taux de {tva_rate}%"
                }
            
        except Exception as e:
            return {'type': 'tva', 'success': False, 'error': str(e)}
    
    def _calculate_arithmetic(self, prompt: str) -> Dict[str, Any]:
        """Effectue des calculs arithm√©tiques simples."""
        try:
            # Extraire l'expression arithm√©tique
            expr_match = re.search(r'(\d+(?:\.\d+)?)\s*([\+\-\*\/])\s*(\d+(?:\.\d+)?)', prompt)
            
            if expr_match:
                num1 = Decimal(expr_match.group(1))
                operator = expr_match.group(2)
                num2 = Decimal(expr_match.group(3))
                
                if operator == '+':
                    result = self.calc_helper.add(num1, num2)
                    op_name = 'addition'
                elif operator == '-':
                    result = self.calc_helper.subtract(num1, num2)
                    op_name = 'soustraction'
                elif operator == '*':
                    result = self.calc_helper.multiply(num1, num2)
                    op_name = 'multiplication'
                elif operator == '/':
                    result = self.calc_helper.divide(num1, num2)
                    op_name = 'division'
                
                return {
                    'type': 'arithmetic',
                    'success': True,
                    'result': float(result),
                    'formatted_result': f"""
üî¢ **Calcul Arithm√©tique**
{num1} {operator} {num2} = **{result}**
                    """.strip(),
                    'explanation': f"R√©sultat de la {op_name}: {num1} {operator} {num2}"
                }
                
        except Exception as e:
            return {'type': 'arithmetic', 'success': False, 'error': str(e)}
    
    def _calculate_accounting(self, prompt: str) -> Dict[str, Any]:
        """Calcule les soldes et √©quilibres comptables."""
        try:
            numbers = self._extract_numbers(prompt)
            
            if 'd√©bit' in prompt.lower() and 'cr√©dit' in prompt.lower():
                if len(numbers) >= 2:
                    debit = numbers[0]
                    credit = numbers[1]
                    solde = self.calc_helper.subtract(debit, credit)
                    
                    return {
                        'type': 'accounting',
                        'success': True,
                        'result': {
                            'debit': float(debit),
                            'credit': float(credit),
                            'solde': float(solde)
                        },
                        'formatted_result': f"""
üìä **Calcul Comptable**
- D√©bit: {debit:.2f} ‚Ç¨
- Cr√©dit: {credit:.2f} ‚Ç¨
- **Solde: {solde:.2f} ‚Ç¨** {'(D√©biteur)' if solde > 0 else '(Cr√©diteur)' if solde < 0 else '(√âquilibr√©)'}
                        """.strip(),
                        'explanation': "Calcul du solde comptable (D√©bit - Cr√©dit)"
                    }
            
        except Exception as e:
            return {'type': 'accounting', 'success': False, 'error': str(e)}
    
    def _calculate_percentage(self, prompt: str) -> Dict[str, Any]:
        """Calcule les pourcentages."""
        try:
            # Pattern pour "X% de Y"
            percent_match = re.search(r'(\d+(?:\.\d+)?)\s*%\s*(?:de|sur)\s*(\d+(?:\.\d+)?)', prompt)
            
            if percent_match:
                percentage = Decimal(percent_match.group(1))
                base_amount = Decimal(percent_match.group(2))
                result = self.calc_helper.multiply(base_amount, percentage / 100)
                
                return {
                    'type': 'percentage',
                    'success': True,
                    'result': float(result),
                    'formatted_result': f"""
üìà **Calcul de Pourcentage**
{percentage}% de {base_amount} = **{result:.2f}**
                    """.strip(),
                    'explanation': f"Calcul: {base_amount} √ó {percentage}% = {result}"
                }
                
        except Exception as e:
            return {'type': 'percentage', 'success': False, 'error': str(e)}
    
    def _calculate_generic(self, prompt: str) -> Dict[str, Any]:
        """Traite les calculs g√©n√©riques."""
        try:
            numbers = self._extract_numbers(prompt)
            
            if len(numbers) >= 2:
                if 'total' in prompt.lower() or 'somme' in prompt.lower():
                    result = self.calc_helper.add(*numbers)
                    return {
                        'type': 'sum',
                        'success': True,
                        'result': float(result),
                        'formatted_result': f"""
‚ûï **Somme**
{' + '.join(map(str, numbers))} = **{result}**
                        """.strip(),
                        'explanation': f"Somme de {len(numbers)} nombres"
                    }
                elif 'moyenne' in prompt.lower():
                    total = self.calc_helper.add(*numbers)
                    moyenne = self.calc_helper.divide(total, len(numbers))
                    return {
                        'type': 'average',
                        'success': True,
                        'result': float(moyenne),
                        'formatted_result': f"""
üìä **Moyenne**
({' + '.join(map(str, numbers))}) √∑ {len(numbers)} = **{moyenne}**
                        """.strip(),
                        'explanation': f"Moyenne de {len(numbers)} nombres"
                    }
            
            return {'type': 'generic', 'success': False, 'error': 'Calcul non reconnu'}
            
        except Exception as e:
            return {'type': 'generic', 'success': False, 'error': str(e)}
    
    def _extract_numbers(self, text: str) -> List[Decimal]:
        """Extrait tous les nombres du texte."""
        numbers = []
        
        # Chercher tous les nombres dans le texte
        for pattern in self.number_patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                try:
                    # Normaliser le nombre (remplacer virgule par point)
                    normalized = match.replace(',', '.')
                    numbers.append(Decimal(normalized))
                except:
                    continue
        
        return numbers
