# ===========================================
# WANZOBE BACKEND - DOCKERFILE STANDARDISÉ
# Service: {{SERVICE_NAME}}
# Optimisé pour Yarn Workspaces + Multi-stage
# ===========================================

# ======== STAGE 1: BUILD ========
FROM node:20.13.0-alpine3.19 AS builder

# Métadonnées
LABEL maintainer="Wanzobe DevOps Team"
LABEL service="{{SERVICE_NAME}}"
LABEL stage="builder"

# Installation des dépendances système pour le build
RUN apk update && apk upgrade && \
    apk add --no-cache \
        ca-certificates \
        python3 \
        make \
        g++ \
        curl \
    && rm -rf /var/cache/apk/*

# Configuration du répertoire de travail
WORKDIR /app

# Copie des fichiers de configuration du monorepo
COPY package.json yarn.lock ./
COPY turbo.json ./

# Copie des packages partagés (priorité pour workspace linking)
COPY packages/shared ./packages/shared/
COPY packages/types ./packages/types/
COPY packages/tsconfig ./packages/tsconfig/

# Copie du service spécifique
COPY apps/{{SERVICE_NAME}}/package.json ./apps/{{SERVICE_NAME}}/

# Installation des dépendances avec Yarn Workspaces
RUN yarn install --frozen-lockfile --ignore-engines

# Copie du code source du service
COPY apps/{{SERVICE_NAME}}/src ./apps/{{SERVICE_NAME}}/src/
COPY apps/{{SERVICE_NAME}}/tsconfig*.json ./apps/{{SERVICE_NAME}}/
COPY apps/{{SERVICE_NAME}}/nest-cli.json ./apps/{{SERVICE_NAME}}/

# Build des packages partagés d'abord
WORKDIR /app/packages/shared
RUN yarn build

# Retour au service et build
WORKDIR /app/apps/{{SERVICE_NAME}}
RUN yarn build

# ======== STAGE 2: PRODUCTION ========
FROM node:20.13.0-alpine3.19 AS production

# Métadonnées
LABEL maintainer="Wanzobe DevOps Team"
LABEL service="{{SERVICE_NAME}}"
LABEL stage="production"

# Installation des dépendances runtime + sécurité
RUN apk update && apk upgrade && \
    apk add --no-cache \
        ca-certificates \
        dumb-init \
        curl \
        tini \
    && adduser -D -u 1001 nodeuser \
    && rm -rf /var/cache/apk/*

# Configuration du répertoire de travail
WORKDIR /app

# Copie des fichiers de configuration
COPY package.json ./
COPY apps/{{SERVICE_NAME}}/package.json ./apps/{{SERVICE_NAME}}/

# Installation UNIQUEMENT des dépendances de production
RUN yarn install --frozen-lockfile --production=true --ignore-engines && \
    yarn cache clean

# Copie des artefacts buildés depuis le stage builder
COPY --from=builder /app/apps/{{SERVICE_NAME}}/dist ./apps/{{SERVICE_NAME}}/dist
COPY --from=builder /app/packages/shared/dist ./packages/shared/dist
COPY --from=builder /app/packages/shared/package.json ./packages/shared/

# Installation du package shared et création du lien workspace
WORKDIR /app/packages/shared
RUN yarn install --production --ignore-engines

WORKDIR /app
RUN mkdir -p node_modules/@wanzobe && \
    ln -sf /app/packages/shared node_modules/@wanzobe/shared

# Configuration des permissions et utilisateur
RUN chown -R nodeuser:nodeuser /app
USER nodeuser

# Variables d'environnement
ENV NODE_ENV=production
ENV PORT={{SERVICE_PORT}}

# Health check standardisé
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:{{SERVICE_PORT}}/health || exit 1

# Exposition du port
EXPOSE {{SERVICE_PORT}}

# Point d'entrée avec init process
WORKDIR /app/apps/{{SERVICE_NAME}}
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/apps/{{SERVICE_NAME}}/src/main.js"]
